<?php
/**
 * @file
 * Adds the ability to transcribe files using the Scripto library.
 */

/**
 * Implements hook_help.
 */
function scripto_help($path, $arg) {
  switch ($path) {
    case 'admin/help#scripto':
      return '<p>'.  t('Adds the ability to transcribe files using the Scripto library.') .'</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function scripto_permission() {
  return array(
    'configure scripto' => array(
      'title' => t('Configure Scripto'),
      'description' => 'Perform administration tasks for the Scripto module.',
    ),
    'import transcriptions' => array(
      'title' => t('Import transcriptions'),
      'description' => 'Import node transcriptions from MediaWiki to Drupal.',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function scripto_menu() {
  $items['scripto/transcribe'] = array(
    'title' => 'Transcribe',
    'description' => 'Transcribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scripto_transcribe'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/scripto'] = array(
    'title' => 'Configure Scripto',
    'description' => 'Configure Scripto',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scripto_config'),
    'access arguments' => array('configure scripto'),
  );
  return $items;
}

/**
 * Menu callback: displays the scripto module configuration form.
 * 
 * @see scripto_menu()
 */
function scripto_config() {
  
  $form['scripto_zend_framework_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to Zend Framework'),
    '#description' => t('The full path, from root, to the directory containing the Zend Framework library.'),
    '#default_value' => variable_get('scripto_zend_framework_path'),
  );
  $form['scripto_mediawiki_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaWiki API URL'),
    '#description' => t('URL to your <a href="http://www.mediawiki.org/wiki/API:Quick_start_guide#What_you_need_to_access_the_API">MediaWiki installation API</a>'),
    '#default_value' => variable_get('scripto_mediawiki_api_url'),
  );
  $form['scripto_mediawiki_db_name'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaWiki database name'),
    '#description' => t('Name of your MediaWiki database. This is required to log in to Scripto.'),
    '#default_value' => variable_get('scripto_mediawiki_db_name'),
  );
  
  // Get all existing node types.
  $type_names = array();
  foreach (node_type_get_types() as $type_name => $type_info) {
    $type_names[$type_name] = $type_info->name;
  }
  $form['scripto_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#description' => t('Check to enable transcriptions on the specified node types. All files will be transcribable. Use caution when unchecking a node type; all transcriptions that have been imported will be deleted, but they can be re-imported.'),
    '#options' => $type_names,
    '#default_value' => variable_get('scripto_node_types') ? variable_get('scripto_node_types') : array(),
  );
  
  $form['#validate'][] = 'scripto_config_validate';
  $form['#submit'][] = 'scripto_config_submit';
  return system_settings_form($form);
}

/**
 * Form validation handler for scripto_config().
 * 
 * @see scripto_config()
 */
function scripto_config_validate($form, &$form_state) {
  $zend_framework_path = $form_state['values']['scripto_zend_framework_path'];
  $mediawiki_api_url = $form_state['values']['scripto_mediawiki_api_url'];
  $mediawiki_db_name = $form_state['values']['scripto_mediawiki_db_name'];
  
  // Don't continue to validate if the path is invalid.
  if (!is_dir($zend_framework_path)) {
    form_set_error('scripto_zend_framework_path', t('Invalid path to the Zend Framework library.'));
    return;
  }
  
  // Load the Scripto environment to validate the MediaWiki API URL.
  set_include_path(get_include_path() 
                 . PATH_SEPARATOR . $zend_framework_path 
                 . PATH_SEPARATOR . _scripto_get_scripto_path());
  require_once 'Scripto.php';
  if (!Scripto::isValidApiUrl($mediawiki_api_url)) {
    form_set_error('scripto_mediawiki_api_url', t('Invalid MediaWiki API URL.'));
  }
  
  if (!$mediawiki_db_name) {
    form_set_error('scripto_mediawiki_db_name', t('Invalid MediaWiki database name.'));
  }
}

/**
 * Form submission handler for scripto_config().
 * 
 * @see scripto_config()
 */
function scripto_config_submit($form, &$form_state) {
  variable_set('scripto_zend_framework_path', $form_state['values']['scripto_zend_framework_path']);
  variable_set('scripto_mediawiki_api_url', $form_state['values']['scripto_mediawiki_api_url']);
  variable_set('scripto_mediawiki_db_name', $form_state['values']['scripto_mediawiki_db_name']);
  variable_set('scripto_node_types', $form_state['values']['scripto_node_types']);
  
  // Build an array of all node types that have an instance of the 
  // scripto_transcription field.
  $types_with_instance = array();
  $field_instances = field_info_instances();
  foreach ($field_instances['node'] as $type_name => $type) {
    foreach ($type as $field_name => $field) {
      if ('scripto_transcription' == $field_name) {
        $types_with_instance[] = $type_name;
      }
    }
  }
  
  // Iterate the node type checklist.
  foreach ($form_state['values']['scripto_node_types'] as $type_name => $result) {
    
    // Build the instance structure.
    $instance = array(
      'field_name' => 'scripto_transcription',
      'label' => 'Scripto transcription',
      'entity_type' => 'node',
      'bundle' => $type_name,
      'required' => false,
    );
    
    // Delete/ignore the instance if it was not selected. 
    if (0 === $result) {
      field_delete_instance($instance, false);
      continue;
    }
    
    // Do not re-create the instance.
    if (in_array($type_name, $types_with_instance)) {
      continue;
    }
    
    // Create the instance.
    field_create_instance($instance);
  }
}

/**
 * Menu callback: displays the scripto module transcription form.
 * 
 * @see scripto_menu().
 */
function scripto_transcribe($form, &$form_state, $node_id, $file_id) {
  
  $scripto = _scripto_get_scripto();
  $doc = $scripto->getDocument($node_id);
  $doc->setPage($file_id);
  
  // Get the media viewer markup.
  $file = file_load($file_id);
  
  // Zoom.it image viewer.
  if (in_array($file->filemime, _scripto_get_filemime_zoomit())) {
    $url = url('http://api.zoom.it/v1/content/', array('query' => array('url' => file_create_url($file->uri))));
    $response = drupal_http_request($url);
    $html = json_decode($response->data)->embedHtml;
  
  // Google Docs document viewer.
  } else if (in_array($file->filemime, _scripto_get_filemime_googledocs())) {
      $url = url('http://docs.google.com/viewer', array('query' => array('url' => file_create_url($file->uri), 'embed' => 'true')));
      $html = '<iframe src="http://docs.google.com/viewer?embedded=true&url=' . urlencode($url) . '" width="500" height="600" style="border: none;"></iframe>';
  
  // No media viewer.
  } else {
    $html = '<p>No media viewer is available for ' . $file->filemime . ' files. <a href="' . file_create_url($file->uri) . '" target="_blank">Click here</a> to open the file manually.</p>';
  }
  
  // Build the transcription form.
  $form['media_viewer'] = array('#markup' => $html);
  $form['transcription'] = array(
    '#type' => 'textarea',
    '#title' => t('Transcription'),
    '#default_value' =>  $doc->getTranscriptionPageWikitext(),
    '#cols' => 60,
    '#rows' => 10,
  );
  
  // @see http://drupal.org/node/751826 under "Submitting Forms" to see why the 
  // two values below count as hidden fields.
  $form['node_id'] = array('#type' => 'value', '#value' => $node_id);
  $form['file_id'] = array('#type' => 'value', '#value' => $file_id);
    
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Transcription'));
  $form['#submit'][] = 'scripto_transcribe_submit';
  return $form;
}

/**
 * Form submission handler for scripto_transcribe().
 * 
 * @see scripto_transcribe()
 */
function scripto_transcribe_submit($form, &$form_state) {
  $scripto = _scripto_get_scripto();
  $doc = $scripto->getDocument($form_state['values']['node_id']);
  $doc->setPage($form_state['values']['file_id']);
  $doc->editTranscriptionPage($form_state['values']['transcription']);
}

/**
 * Implementation of hook_node_view_alter().
 */
function scripto_node_view_alter(&$build) {
  
  // Only nodes with the scripto_transcription field can be transcribed.
  if ('full' != $build['#view_mode'] || !isset($build['#node']->scripto_transcription)) {
    return;
  }
  
  // Add a list of links to transcription pages for all files and images 
  // assigned to this node. Assume current order is the correct page order.
  $items = _scripto_get_pages($build['#node']);
  
  // Build the markup.
  $html = '<h3>Transcribe</h3>';
  $html .= '<ol>';
  foreach ($items as $item) {
    $url = url('scripto/transcribe/' . $build['#node']->nid . '/' . $item['fid']);
    $html .= '<li><a href="' . $url . '">' . $item['filename'] . '</a></li>';
  }
  $html .= '</ol>';
  $build['transcription_page_list'] = array(
    '#markup' => $html, 
    '#weight' => 20,
  );
  
  // Add an access-protected import transcription button
  if (user_access('import transcriptions')) {
    $build['import_transcription'] = drupal_get_form('scripto_import_transcription', $build['#node']->nid);
  }
}

/**
 * Node build callback: displays the scripto module import transcription form.
 * 
 * @see scripto_menu().
 */
function scripto_import_transcription($form, &$form_state, $node_id) {
  $form['node_id'] = array('#type' => 'value', '#value' => $node_id);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import All Transcriptions'));
  $form['#submit'][] = 'scripto_import_transcription_submit';
  $form['#weight'] = '20';
  return $form;
}

/**
 * Form submission handler for scripto_import_transcription().
 * 
 * @see scripto_import_transcription()
 */
function scripto_import_transcription_submit($form, &$form_state) {
  if (!user_access('import transcriptions')) {
    return;
  }
  $scripto = _scripto_get_scripto();
  $doc = $scripto->getDocument($form_state['values']['node_id']);
  $doc->export();
}

/**
 * Dumps a var directly to the browser. Used for debugging purposes only.
 */
function _scripto_debug($var, $exit = false) {
  echo '<pre>' . print_r($var,true) . '</pre>';
  if ($exit) exit;
}

/**
 * Load the Scripto environment and return a Scripto object.
 */
function _scripto_get_scripto() {
  
  set_include_path(get_include_path() 
                 . PATH_SEPARATOR . variable_get('scripto_zend_framework_path') 
                 . PATH_SEPARATOR . _scripto_get_scripto_path());
  
  require_once 'Scripto.php';
  require_once 'ScriptoAdapterDrupal.php';
  $scripto = new Scripto(new ScriptoAdapterDrupal, 
                         array('api_url' => variable_get('scripto_mediawiki_api_url'), 
                               'db_name' => variable_get('scripto_mediawiki_db_name')));
  return $scripto;
}

/**
 * Return the path to the directory containing the Scripto library.
 */
function _scripto_get_scripto_path() {
  return realpath(drupal_get_path('module', 'scripto')) . '/lib';
}

/**
 * Returns all the pages (files and images) of a node, in current order.
 */
function _scripto_get_pages($node) {
  $items = array();
  $fields = field_read_fields(array('type' => array('file', 'image')));
  foreach ($node as $key => $value) {
    // Only process file and image fields.
    if (!array_key_exists($key, $fields)) {
      continue;
    }
    $items = array_merge($items, field_get_items('node', $node, $key));
  }
  return $items;
}

/**
 * Returns an array of MIME types compatible with the Zoom.it image viewer.
 */
function _scripto_get_filemime_zoomit() {
  return array(
    // gif
    'image/gif', 'image/x-xbitmap', 'image/gi_', 
    // jpg
    'image/jpeg', 'image/jpg', 'image/jpe_', 'image/pjpeg', 
    'image/vnd.swiftview-jpeg', 
    // png
    'image/png', 'application/png', 'application/x-png', 
    // bmp
    'image/bmp', 'image/x-bmp', 'image/x-bitmap', 
    'image/x-xbitmap', 'image/x-win-bitmap', 
    'image/x-windows-bmp', 'image/ms-bmp', 'image/x-ms-bmp', 
    'application/bmp', 'application/x-bmp', 
    'application/x-win-bitmap', 
    // ico
    'image/ico', 'image/x-icon', 'application/ico', 'application/x-ico', 
    'application/x-win-bitmap', 'image/x-win-bitmap', 
    // tiff
    'image/tiff', 
  );
}

/**
 * Returns an array of MIME types compatible with the Google Docs document 
 * viewer.
 */
function _scripto_get_filemime_googledocs() {
  return array(
    // pdf
    'application/pdf', 'application/x-pdf', 
    'application/acrobat', 'applications/vnd.pdf', 'text/pdf', 
    'text/x-pdf', 
    // docx
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
    // doc
    'application/msword', 'application/doc', 'appl/text', 
    'application/vnd.msword', 'application/vnd.ms-word', 
    'application/winword', 'application/word', 'application/vnd.ms-office', 
    'application/x-msw6', 'application/x-msword', 
    // ppt
    'application/vnd.ms-powerpoint', 'application/mspowerpoint', 
    'application/ms-powerpoint', 'application/mspowerpnt', 
    'application/vnd-mspowerpoint', 'application/powerpoint', 
    'application/x-powerpoint', 'application/x-m', 
    // pptx
    'application/vnd.openxmlformats-officedocument.presentationml.presentation', 
    // xls
    'application/vnd.ms-excel', 'application/msexcel', 
    'application/x-msexcel', 'application/x-ms-excel', 
    'application/vnd.ms-excel', 'application/x-excel', 
    'application/x-dos_ms_excel', 'application/xls', 
    // xlsx
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
    // tiff
    'image/tiff', 
    // ps, ai
    'application/postscript', 'application/ps', 
    'application/x-postscript', 'application/x-ps', 
    'text/postscript', 'application/x-postscript-not-eps', 
    // eps
    'application/eps', 'application/x-eps', 'image/eps', 
    'image/x-eps', 
    // psd
    'image/vnd.adobe.photoshop', 'image/photoshop', 
    'image/x-photoshop', 'image/psd', 'application/photoshop', 
    'application/psd', 'zz-application/zz-winassoc-psd', 
    // dxf
    'application/dxf', 'application/x-autocad', 
    'application/x-dxf', 'drawing/x-dxf', 'image/vnd.dxf', 
    'image/x-autocad', 'image/x-dxf', 
    'zz-application/zz-winassoc-dxf', 
    // xvg
    'image/svg+xml', 
    // xps
    'application/vnd.ms-xpsdocument', 
  );
}
